{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":13119574,"sourceType":"datasetVersion","datasetId":8310946}],"dockerImageVersionId":31089,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"pip install pandas","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T17:43:46.574777Z","iopub.execute_input":"2025-09-20T17:43:46.575114Z","iopub.status.idle":"2025-09-20T17:43:50.761952Z","shell.execute_reply.started":"2025-09-20T17:43:46.575090Z","shell.execute_reply":"2025-09-20T17:43:50.760592Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pip install googlemaps","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-20T17:43:50.763668Z","iopub.execute_input":"2025-09-20T17:43:50.763974Z","iopub.status.idle":"2025-09-20T17:43:54.922315Z","shell.execute_reply.started":"2025-09-20T17:43:50.763945Z","shell.execute_reply":"2025-09-20T17:43:54.921074Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\"\"\"\nRandy Olson's Shortest Route Program modified By Andrew Liesinger to:\n    1: Detect waypoints file at runtime - if found use it, otherwise look up distances via google calls (and then save to waypoint file)\n    2: Dynamically create and open an HTML file showing the route when a shorter route is found\n    3: Make it easier to tinker with the Generation / Population parameters\n\"\"\"\nfrom __future__ import print_function\nfrom itertools import combinations\nimport googlemaps\nimport pandas as pd\nimport numpy as np\nimport os.path\nimport random\nimport webbrowser\n\nGOOGLE_MAPS_API_KEY = \"Add you own API\"\nwaypoints_file = \"/kaggle/input/my-waypoints-dist-dur/my-waypoints-dist-dur.tsv\"\n\n#This is the general filename - as shorter routes are discovered the Population fitness score will be inserted into the filename\n#so that interim results are saved for comparision.  The actual filenames using the default below will be:\n#Output_<Population Fitness Score>.html \noutput_file = 'Output.html'\n\n#parameters for the Genetic algoritim\nthisRunGenerations=5000\nthisRunPopulation_size=100\n\n\nall_waypoints = [\"USS Alabama, Battleship Parkway, Mobile, AL\",\n                 \"Grand Canyon National Park, Arizona\",\n                 \"Toltec Mounds, Scott, AR\",\n                 \"San Andreas Fault, San Benito County, CA\",\n                 \"Cable Car Museum, 94108, 1201 Mason St, San Francisco, CA 94108\",\n                 \"Pikes Peak, Colorado\",\n                 \"The Mark Twain House & Museum, Farmington Avenue, Hartford, CT\",\n                 \"New Castle Historic District, Delaware\",\n                 \"White House, Pennsylvania Avenue Northwest, Washington, DC\",\n                 \"Cape Canaveral, FL\",\n                 \"Okefenokee Swamp Park, Okefenokee Swamp Park Road, Waycross, GA\",\n                 \"Craters of the Moon National Monument & Preserve, Arco, ID\",\n                 \"Lincoln Home National Historic Site Visitor Center, 426 South 7th Street, Springfield, IL\",\n                 \"West Baden Springs Hotel, West Baden Avenue, West Baden Springs, IN\",\n                 \"Terrace Hill, Grand Avenue, Des Moines, IA\",\n                 \"C. W. Parker Carousel Museum, South Esplanade Street, Leavenworth, KS\",\n                 \"Mammoth Cave National Park, Mammoth Cave Pkwy, Mammoth Cave, KY\",\n                 \"French Quarter, New Orleans, LA\",\n                 \"Acadia National Park, Maine\",\n                 \"Maryland State House, 100 State Cir, Annapolis, MD 21401\",\n                 \"USS Constitution, Boston, MA\",\n                 \"Olympia Entertainment, Woodward Avenue, Detroit, MI\",\n                 \"Fort Snelling, Tower Avenue, Saint Paul, MN\",\n                 \"Vicksburg National Military Park, Clay Street, Vicksburg, MS\",\n                 \"Gateway Arch, Washington Avenue, St Louis, MO\",\n                 \"Glacier National Park, West Glacier, MT\",\n                 \"Ashfall Fossil Bed, Royal, NE\",\n                 \"Hoover Dam, NV\",\n                 \"Omni Mount Washington Resort, Mount Washington Hotel Road, Bretton Woods, NH\",\n                 \"Congress Hall, Congress Place, Cape May, NJ 08204\",\n                 \"Carlsbad Caverns National Park, Carlsbad, NM\",\n                 \"Statue of Liberty, Liberty Island, NYC, NY\",\n                 \"Wright Brothers National Memorial Visitor Center, Manteo, NC\",\n                 \"Fort Union Trading Post National Historic Site, Williston, North Dakota 1804, ND\",\n                 \"Spring Grove Cemetery, Spring Grove Avenue, Cincinnati, OH\",\n                 \"Chickasaw National Recreation Area, 1008 W 2nd St, Sulphur, OK 73086\",\n                 \"Columbia River Gorge National Scenic Area, Oregon\",\n                 \"Liberty Bell, 6th Street, Philadelphia, PA\",\n                 \"The Breakers, Ochre Point Avenue, Newport, RI\",\n                 \"Fort Sumter National Monument, Sullivan's Island, SC\",\n                 \"Mount Rushmore National Memorial, South Dakota 244, Keystone, SD\",\n                 \"Graceland, Elvis Presley Boulevard, Memphis, TN\",\n                 \"The Alamo, Alamo Plaza, San Antonio, TX\",\n                 \"Bryce Canyon National Park, Hwy 63, Bryce, UT\",\n                 \"Shelburne Farms, Harbor Road, Shelburne, VT\",\n                 \"Mount Vernon, Fairfax County, Virginia\",\n                 \"Hanford Site, Benton County, WA\",\n                 \"Lost World Caverns, Lewisburg, WV\",\n                 \"Taliesin, County Road C, Spring Green, Wisconsin\",\n                 \"Yellowstone National Park, WY 82190\"]\n\ndef CreateOptimalRouteHtmlFile(optimal_route, distance, display=True):\n    optimal_route = list(optimal_route)\n    optimal_route += [optimal_route[0]]\n\n    Page_1 = \"\"\"\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\n        <meta name=\"description\" content=\"Randy Olson uses machine learning to find the optimal road trip across the U.S.\">\n        <meta name=\"author\" content=\"Randal S. Olson\">\n        \n        <title>The optimal road trip across the U.S. according to machine learning</title>\n        <style>\n          html, body, #map-canvas {\n            height: 100%;\n            margin: 0px;\n            padding: 0px\n          }\n          #panel {\n            position: absolute;\n            top: 5px;\n            left: 50%;\n            margin-left: -180px;\n            z-index: 5;\n            background-color: #fff;\n            padding: 10px;\n            border: 1px solid #999;\n          }\n        </style>\n        <script src=\"https://maps.googleapis.com/maps/api/js?v=3.exp&signed_in=true\"></script>\n        <script>\n            var routes_list = []\n            var markerOptions = {icon: \"http://maps.gstatic.com/mapfiles/markers2/marker.png\"};\n            var directionsDisplayOptions = {preserveViewport: true,\n                                            markerOptions: markerOptions};\n            var directionsService = new google.maps.DirectionsService();\n            var map;\n\n            function initialize() {\n              var center = new google.maps.LatLng(39, -96);\n              var mapOptions = {\n                zoom: 5,\n                center: center\n              };\n              map = new google.maps.Map(document.getElementById('map-canvas'), mapOptions);\n              for (i=0; i<routes_list.length; i++) {\n                routes_list[i].setMap(map); \n              }\n            }\n\n            function calcRoute(start, end, routes) {\n              \n              var directionsDisplay = new google.maps.DirectionsRenderer(directionsDisplayOptions);\n\n              var waypts = [];\n              for (var i = 0; i < routes.length; i++) {\n                waypts.push({\n                  location:routes[i],\n                  stopover:true});\n                }\n              \n              var request = {\n                  origin: start,\n                  destination: end,\n                  waypoints: waypts,\n                  optimizeWaypoints: false,\n                  travelMode: google.maps.TravelMode.DRIVING\n              };\n\n              directionsService.route(request, function(response, status) {\n                if (status == google.maps.DirectionsStatus.OK) {\n                    directionsDisplay.setDirections(response);      \n                }\n              });\n\n              routes_list.push(directionsDisplay);\n            }\n\n            function createRoutes(route) {\n                // Google's free map API is limited to 10 waypoints so need to break into batches\n                route.push(route[0]);\n                var subset = 0;\n                while (subset < route.length) {\n                    var waypointSubset = route.slice(subset, subset + 10);\n\n                    var startPoint = waypointSubset[0];\n                    var midPoints = waypointSubset.slice(1, waypointSubset.length - 1);\n                    var endPoint = waypointSubset[waypointSubset.length - 1];\n\n                    calcRoute(startPoint, endPoint, midPoints);\n\n                    subset += 9;\n                }\n            }\n    \"\"\"\n    Page_2 = \"\"\"\n            \n            createRoutes(optimal_route);\n\n            google.maps.event.addDomListener(window, 'load', initialize);\n\n        </script>\n      </head>\n      <body>\n        <div id=\"map-canvas\"></div>\n      </body>\n    </html>\n    \"\"\"\n\n    localoutput_file = output_file.replace('.html', '_' + str(distance) + '.html')\n    with open(localoutput_file, 'w') as fs:\n        fs.write(Page_1)\n        fs.write(\"\\t\\t\\toptimal_route = {0}\".format(str(optimal_route)))\n        fs.write(Page_2)\n\n    if display:\n        webbrowser.open_new_tab(localoutput_file)\n\n\ndef compute_fitness(solution):\n    \"\"\"\n        This function returns the total distance traveled on the current road trip.\n        \n        The genetic algorithm will favor road trips that have shorter\n        total distances traveled.\n    \"\"\"\n    \n    solution_fitness = 0.0\n    \n    for index in range(len(solution)):\n        waypoint1 = solution[index - 1]\n        waypoint2 = solution[index]\n        solution_fitness += waypoint_distances[frozenset([waypoint1, waypoint2])]\n        \n    return solution_fitness\n\ndef generate_random_agent():\n    \"\"\"\n        Creates a random road trip from the waypoints.\n    \"\"\"\n    \n    new_random_agent = list(all_waypoints)\n    random.shuffle(new_random_agent)\n    return tuple(new_random_agent)\n\ndef mutate_agent(agent_genome, max_mutations=3):\n    \"\"\"\n        Applies 1 - `max_mutations` point mutations to the given road trip.\n        \n        A point mutation swaps the order of two waypoints in the road trip.\n    \"\"\"\n    \n    agent_genome = list(agent_genome)\n    num_mutations = random.randint(1, max_mutations)\n    \n    for mutation in range(num_mutations):\n        swap_index1 = random.randint(0, len(agent_genome) - 1)\n        swap_index2 = swap_index1\n\n        while swap_index1 == swap_index2:\n            swap_index2 = random.randint(0, len(agent_genome) - 1)\n\n        agent_genome[swap_index1], agent_genome[swap_index2] = agent_genome[swap_index2], agent_genome[swap_index1]\n            \n    return tuple(agent_genome)\n\ndef shuffle_mutation(agent_genome):\n    \"\"\"\n        Applies a single shuffle mutation to the given road trip.\n        \n        A shuffle mutation takes a random sub-section of the road trip\n        and moves it to another location in the road trip.\n    \"\"\"\n    \n    agent_genome = list(agent_genome)\n    \n    start_index = random.randint(0, len(agent_genome) - 1)\n    length = random.randint(2, 20)\n    \n    genome_subset = agent_genome[start_index:start_index + length]\n    agent_genome = agent_genome[:start_index] + agent_genome[start_index + length:]\n    \n    insert_index = random.randint(0, len(agent_genome) + len(genome_subset) - 1)\n    agent_genome = agent_genome[:insert_index] + genome_subset + agent_genome[insert_index:]\n    \n    return tuple(agent_genome)\n\ndef generate_random_population(pop_size):\n    \"\"\"\n        Generates a list with `pop_size` number of random road trips.\n    \"\"\"\n    \n    random_population = []\n    for agent in range(pop_size):\n        random_population.append(generate_random_agent())\n    return random_population\n    \ndef run_genetic_algorithm(generations=5000, population_size=100):\n    \"\"\"\n        The core of the Genetic Algorithm.\n        \n        `generations` and `population_size` must be a multiple of 10.\n    \"\"\"\n    \n    current_best_distance = -1\n    population_subset_size = int(population_size / 10.)\n    generations_10pct = int(generations / 10.)\n    \n    # Create a random population of `population_size` number of solutions.\n    population = generate_random_population(population_size)\n\n    # For `generations` number of repetitions...\n    for generation in range(generations):\n        \n        # Compute the fitness of the entire current population\n        population_fitness = {}\n\n        for agent_genome in population:\n            if agent_genome in population_fitness:\n                continue\n\n            population_fitness[agent_genome] = compute_fitness(agent_genome)\n\n        # Take the top 10% shortest road trips and produce offspring each from them\n        new_population = []\n        for rank, agent_genome in enumerate(sorted(population_fitness,\n                                                   key=population_fitness.get)[:population_subset_size]):\n            if (generation % generations_10pct == 0 or generation == generations - 1) and rank == 0:\n                current_best_genome = agent_genome\n                print(\"Generation %d best: %d | Unique genomes: %d\" % (generation,\n                                                                       population_fitness[agent_genome],\n                                                                       len(population_fitness)))\n                print(agent_genome)                \n                print(\"\")\n\n                # If this is the first route found, or it is shorter than the best route we know,\n                # create a html output and display it\n                if population_fitness[agent_genome] < current_best_distance or current_best_distance < 0:\n                    current_best_distance = population_fitness[agent_genome]\n                    CreateOptimalRouteHtmlFile(agent_genome, current_best_distance, False)\n                    \n\n            # Create 1 exact copy of each of the top road trips\n            new_population.append(agent_genome)\n\n            # Create 2 offspring with 1-3 point mutations\n            for offspring in range(2):\n                new_population.append(mutate_agent(agent_genome, 3))\n                \n            # Create 7 offspring with a single shuffle mutation\n            for offspring in range(7):\n                new_population.append(shuffle_mutation(agent_genome))\n\n        # Replace the old population with the new population of offspring \n        for i in range(len(population))[::-1]:\n            del population[i]\n\n        population = new_population\n    return current_best_genome\n\n\nif __name__ == '__main__':\n    # If this file exists, read the data stored in it - if not then collect data by asking google\n    print(\"Begin finding shortest route\")\n    file_path = waypoints_file\n    if os.path.exists(file_path):\n        print(\"Waypoints exist\")\n        #file exists used saved results\n        waypoint_distances = {}\n        waypoint_durations = {}\n        all_waypoints = set()\n\n        waypoint_data = pd.read_csv(file_path, sep=\"\\t\")\n\n        for i, row in waypoint_data.iterrows():\n            waypoint_distances[frozenset([row.waypoint1, row.waypoint2])] = row.distance_m\n            waypoint_durations[frozenset([row.waypoint1, row.waypoint2])] = row.duration_s\n            all_waypoints.update([row.waypoint1, row.waypoint2])\n\n    else:\n        # File does not exist - compute results       \n        print(\"Collecting Waypoints\")\n        waypoint_distances = {}\n        waypoint_durations = {}\n\n\n        gmaps = googlemaps.Client(GOOGLE_MAPS_API_KEY)\n        for (waypoint1, waypoint2) in combinations(all_waypoints, 2):\n            try:\n                route = gmaps.distance_matrix(origins=[waypoint1],\n                                              destinations=[waypoint2],\n                                              mode=\"driving\", # Change to \"walking\" for walking directions,\n                                                              # \"bicycling\" for biking directions, etc.\n                                              language=\"English\",\n                                              units=\"metric\")\n\n                # \"distance\" is in meters\n                distance = route[\"rows\"][0][\"elements\"][0][\"distance\"][\"value\"]\n\n                # \"duration\" is in seconds\n                duration = route[\"rows\"][0][\"elements\"][0][\"duration\"][\"value\"]\n\n                waypoint_distances[frozenset([waypoint1, waypoint2])] = distance\n                waypoint_durations[frozenset([waypoint1, waypoint2])] = duration\n        \n            except Exception as e:\n                print(\"Error with finding the route between %s and %s.\" % (waypoint1, waypoint2))\n        \n        print(\"Saving Waypoints\")\n        with open(waypoints_file, \"w\") as out_file:\n            out_file.write(\"\\t\".join([\"waypoint1\",\n                                      \"waypoint2\",\n                                      \"distance_m\",\n                                      \"duration_s\"]))\n        \n            for (waypoint1, waypoint2) in waypoint_distances.keys():\n                out_file.write(\"\\n\" +\n                               \"\\t\".join([waypoint1,\n                                          waypoint2,\n                                          str(waypoint_distances[frozenset([waypoint1, waypoint2])]),\n                                          str(waypoint_durations[frozenset([waypoint1, waypoint2])])]))\n\n    print(\"Search for optimal route\")\n    optimal_route = run_genetic_algorithm(generations=thisRunGenerations, population_size=thisRunPopulation_size)\n\n    # This is probably redundant now that the files are created in run_genetic_algorithm,\n    # but leaving it active to ensure  the final result is not lost\n    CreateOptimalRouteHtmlFile(optimal_route, 1, True)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-20T17:43:54.924490Z","iopub.execute_input":"2025-09-20T17:43:54.924918Z","iopub.status.idle":"2025-09-20T17:44:06.489772Z","shell.execute_reply.started":"2025-09-20T17:43:54.924877Z","shell.execute_reply":"2025-09-20T17:44:06.488721Z"}},"outputs":[],"execution_count":null}]}